/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/vtBf1F0JtPz
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
'use client'

import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import {useForm} from "react-hook-form"
import {z} from 'zod'
import { zodResolver } from "@hookform/resolvers/zod"
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "../ui/form"
import { loginFormSchema, signupFormSchema } from "@/app/login/zod_schema"
import { useState } from "react"
import CircleLoading from "../ui/circleLoading"
import { handlePostMethod } from "@/utils/apiCall"
import { settingStorageValue } from "@/utils/localStorageSaving"
import { useRouter } from "next/navigation"

export function LoginComponent() {
  const router = useRouter();
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const handleLoginSubmit = async(values: z.infer<typeof loginFormSchema>) => {
    // console.log('Login Values:', values);
    setLoading(true);
    const response = await handlePostMethod('/api/v1/auth/login', values);
    if(response.status === 200){
        settingStorageValue('authenticated', 'true');
        settingStorageValue('user', JSON.stringify(response.data));
        router.push('/');
    } else{
        setError(response.message);
    }
    setLoading(false);
  };
  
  const handleSignupSubmit = async(values: z.infer<typeof signupFormSchema>) => {
    // console.log('Signup Values:', values);
    setLoading(true);
    const response = await handlePostMethod("/api/v1/auth/sign-up", values)
        if(response.status === 200 || response.status === 201){
            settingStorageValue('authenticated', 'true');
            settingStorageValue('user', JSON.stringify(response.data));
            router.push('/');
        } else{
            setError(response.message);
        }
        // console.log(form);
        setLoading(false);
  };

  const loginForm = useForm({
    resolver: zodResolver(loginFormSchema),
    defaultValues: { email: '', password: '' }
  });

  // Signup form
  const signupForm = useForm({
    resolver: zodResolver(signupFormSchema),
    defaultValues: { email: '', password: '', confirmPassword: '', name: '', mobile: "", institute: '' }
  });
  
  return (
    <div className="mx-auto max-w-[600px] space-y-6 py-12 md:py-24">
      <Tabs defaultValue="login" className="w-full">
        <TabsList className="grid w-full grid-cols-2 rounded-lg bg-muted p-1">
          <TabsTrigger value="login">Login</TabsTrigger>
          <TabsTrigger value="signup">Sign Up</TabsTrigger>
        </TabsList>
        <TabsContent value="login">
          <Card className="md:py-16 md:px-10">
            <CardHeader>
              <CardTitle>Login</CardTitle>
              <CardDescription>Enter your email and password to access your account.</CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...loginForm}>
                <form onSubmit={loginForm.handleSubmit(handleLoginSubmit)} className="space-y-4">
                  <FormField
                  control={loginForm.control}
                  name="email"
                  render={({field}) => (
                    <FormItem>
                      <FormLabel>Email</FormLabel>
                        <FormControl>
                          <Input placeholder="m@gmail.com" {...field} required/>
                        </FormControl>
                        <FormMessage />
                    </FormItem>
                  )}
                  />
                  <FormField
                  control={loginForm.control}
                  name="password"
                  render={({field}) => (
                    <FormItem>
                      <FormLabel>Password</FormLabel>
                        <FormControl>
                          <Input placeholder="*********" {...field} required type="password"/>
                        </FormControl>
                        <FormMessage />
                    </FormItem> 
                  )}
                  />
                  {
                    loading?
                      <Button type="submit" className="w-full" disabled>
                        <CircleLoading color="bg-neutral-50"/>
                      </Button>
                    :
                      <Button type="submit" className="w-full">
                        Login
                      </Button>
                  }
                </form>
                { error && (
                    <div className="my-3 text-center text-sm text-red-600">
                        <span>{error}</span>
                    </div>
                )}
              </Form>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="signup">
          <Card className="md:py-16 md:px-10">
            <CardHeader>
              <CardTitle>Sign Up</CardTitle>
              <CardDescription>Create a new account by entering your details below.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
            <Form {...signupForm}>
                <form onSubmit={signupForm.handleSubmit(handleSignupSubmit)} className="space-y-4">
                  <FormField
                  control={signupForm.control}
                  name="name"
                  render={({field}) => (
                    <FormItem>
                      <FormLabel>Name</FormLabel>
                        <FormControl>
                          <Input placeholder="John Doe" {...field} required/>
                        </FormControl>
                        <FormMessage />
                    </FormItem>
                  )}
                  />
                  <FormField
                  control={signupForm.control}
                  name="email"
                  render={({field}) => (
                    <FormItem>
                      <FormLabel>Email</FormLabel>
                        <FormControl>
                          <Input placeholder="m@gmail.com" {...field} required/>
                        </FormControl>
                        <FormMessage />
                    </FormItem> 
                  )}
                  />
                  <FormField
                  control={signupForm.control}
                  name="mobile"
                  render={({field}) => (
                    <FormItem>
                      <FormLabel>Mobile</FormLabel>
                        <FormControl>
                          <Input placeholder="1234567890" {...field} required/>
                        </FormControl>
                        <FormMessage />
                    </FormItem>
                  )}
                  />
                  <FormField
                  control={signupForm.control}
                  name="institute"
                  render={({field}) => (
                    <FormItem>
                      <FormLabel>Institute Name</FormLabel>
                        <FormControl>
                          <Input placeholder="Jolonda University" {...field} />
                        </FormControl>
                        <FormMessage />
                    </FormItem> 
                  )}
                  />
                  <FormField
                  control={signupForm.control}
                  name="password"
                  render={({field}) => (
                    <FormItem>
                      <FormLabel>Password</FormLabel>
                        <FormControl>
                          <Input placeholder="********" {...field} type="password" required/>
                        </FormControl>
                        <FormMessage />
                    </FormItem>
                  )}
                  />
                  <FormField
                  control={signupForm.control}
                  name="confirmPassword"
                  render={({field}) => (
                    <FormItem>
                      <FormLabel>Confirm Password</FormLabel>
                        <FormControl>
                          <Input placeholder="********" {...field} type="password" required/>
                        </FormControl>
                        <FormMessage />
                    </FormItem> 
                  )}
                  />
                  {
                    loading?
                    <Button type="submit" className="w-full" disabled>
                      <CircleLoading color="bg-neutral-50"/>
                    </Button>
                  :
                    <Button type="submit" className="w-full">
                      Sign Up
                    </Button>
                  }
                </form>
                { error && (
                    <div className="my-3 text-center text-sm text-red-600">
                        <span>{error}</span>
                    </div>
                )}
              </Form>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
